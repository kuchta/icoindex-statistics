schema {
	query: Query
}
type Query {
	getTokenPairRate(tickers: [TickerInput]): [TickerOutput]
	getAddressTransactions(addresses: [AddressInput]): [TransactionOutput]
}
input TickerInput {
	exchange: String
	pair: String!
	datetime: Date!
}
type TickerOutput {
	exchange: String!
	pair: String!
	datetime: [Date!]!
	id: [String]
	rate: Float
}
input AddressInput {
	address: String!
	startDatetime: Date!
	endDatetime: Date!
	granularity: String! # "1 hour/1 day etc. see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-datehistogram-aggregation.html
}
type TransactionOutput {
	address: String!
	receivedAmount: [Float!]!
	receivedCount: [Int!]!
	sentAmount: [Float!]!
	sentCount: [Int!]!
}
scalar Date
